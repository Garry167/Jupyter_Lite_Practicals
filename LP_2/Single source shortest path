import sys

def dijkstra(graph, start_vertex):
    num_vertices = len(graph)
    visited = [False] * num_vertices
    distances = [sys.maxsize] * num_vertices
    distances[start_vertex] = 0
    
    for _ in range(num_vertices):
        min_distance = sys.maxsize
        min_vertex = -1
        
        for v in range(num_vertices):
            if not visited[v] and distances[v] < min_distance:
                min_distance = distances[v]
                min_vertex = v
        
        visited[min_vertex] = True
        
        for v in range(num_vertices):
            if not visited[v] and graph[min_vertex][v] != 0:
                new_distance = distances[min_vertex] + graph[min_vertex][v]
                if new_distance < distances[v]:
                    distances[v] = new_distance
    
    return distances

# Example usage
graph = [
    [0, 4, 0, 0, 0, 0, 0, 8, 0],
    [4, 0, 8, 0, 0, 0, 0, 11, 0],
    [0, 8, 0, 7, 0, 4, 0, 0, 2],
    [0, 0, 7, 0, 9, 14, 0, 0, 0],
    [0, 0, 0, 9, 0, 10, 0, 0, 0],
    [0, 0, 4, 14, 10, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 1, 6],
    [8, 11, 0, 0, 0, 0, 1, 0, 7],
    [0, 0, 2, 0, 0, 0, 6, 7, 0]
]

start_vertex = 0
shortest_distances = dijkstra(graph, start_vertex)
print("Shortest distances from vertex", start_vertex, ":")
for vertex, distance in enumerate(shortest_distances):
    print("Vertex", vertex, ":", distance)
# O((V + E) log V)
