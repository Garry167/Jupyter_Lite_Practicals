import heapq

class Graph:
    def __init__(self, num_vertices):
        self.num_vertices = num_vertices
        self.adjacency_list = [[] for _ in range(num_vertices)]
    
    def add_edge(self, u, v, weight):
        self.adjacency_list[u].append((v, weight))
        self.adjacency_list[v].append((u, weight))
    
    def prim_mst(self):
        visited = [False] * self.num_vertices
        min_heap = []
        mst = []
        
        # Start with vertex 0 as the initial vertex
        heapq.heappush(min_heap, (0, 0))  # (weight, vertex)
        
        while min_heap:
            weight, vertex = heapq.heappop(min_heap)
            
            if visited[vertex]:
                continue
            
            visited[vertex] = True
            
            if vertex != 0:
                mst.append((vertex, weight))
            
            for neighbor, neighbor_weight in self.adjacency_list[vertex]:
                if not visited[neighbor]:
                    heapq.heappush(min_heap, (neighbor_weight, neighbor))
        
        return mst


# Example usage
g = Graph(5)
g.add_edge(0, 1, 2)
g.add_edge(0, 3, 6)
g.add_edge(1, 2, 3)
g.add_edge(1, 3, 8)
g.add_edge(1, 4, 5)
g.add_edge(2, 4, 7)
g.add_edge(3, 4, 9)

mst = g.prim_mst()
for edge in mst:
    print(edge)
